{"version":3,"sources":["reducers/dataReduser.js","actions/action-types.js","reducers/itemReduser.js","reducers/rootReduser.js","actions/receiveApiData.js","api.js","sagas.js","actions/receiveApiDataUrl.js","store.js","actions/requestApiData.js","actions/requestApiDataUrl.js","components/button/Button.js","components/details/Details.js","pages/home/Home.js","App.js","index.js"],"names":["dataReduser","state","type","payload","itemReduser","isOpen","rootReduser","combineReducers","data","itemInfo","receiveApiData","fetchData","a","fetch","response","json","results","console","log","fetchDataUrl","url","getApiData","getApiDataUrl","mySaga","action","call","put","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","applyMiddleware","run","requestApiData","requestApiDataUrl","Button","props","onClick","click","className","connect","keys","Object","values","name","map","element","index","key","Home","isClicked","this","setState","clickBtn","bind","length","item","getItem","Component","dispatch","bindActionCreators","App","ReactDOM","render","document","getElementById"],"mappings":"kQAWeA,EATM,WAAoC,IAAnCC,EAAkC,uDAA1B,GAA0B,yCAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACxC,OAAQD,GACN,ICH4B,mBDI1B,OAAOC,EAET,QACE,OAAOF,I,QEIEG,EAVM,WAAoC,IAAnCH,EAAkC,uDAA1B,GAA0B,yCAApBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACxC,OAAQD,GACN,IDDgC,uBCE9B,OAAO,eAAIC,EAAX,CAAoBE,QAAQ,IAG9B,QACE,OAAOJ,ICDEK,EAJKC,YAAgB,CAClCC,KAAMR,EACNS,SAAUL,I,uBCJCM,EAAiB,SAACF,GAAD,MAC5B,CAAEN,KHF4B,mBGEJC,QAASK,I,QCHxBG,EAAS,uCAAG,8BAAAC,EAAA,+EAEEC,MAAM,iCAFR,cAEfC,EAFe,gBAGFA,EAASC,OAHP,cAGfP,EAHe,yBAIdA,EAAKQ,SAJS,kCAMrBC,QAAQC,IAAR,MANqB,0DAAH,qDASTC,EAAY,uCAAG,WAAOC,GAAP,iBAAAR,EAAA,+EAEDC,MAAMO,GAFL,cAElBN,EAFkB,gBAGLA,EAASC,OAHJ,cAGlBP,EAHkB,yBAIjBA,GAJiB,kCAMxBS,QAAQC,IAAR,MANwB,0DAAH,sD,WCAfG,G,WASAC,G,WAgBeC,GAzBzB,SAAUF,EAAWG,GAArB,uEAGiB,OAHjB,kBAGuBC,YAAKd,GAH5B,OAII,OADMH,EAHV,gBAIUkB,YAAIhB,EAAeF,IAJ7B,uDAMIS,QAAQC,IAAR,MANJ,qDASA,SAAUI,EAAcE,GAAxB,uEAGiB,OAHjB,kBAGuBC,YAAKN,EAAcK,EAAOrB,SAHjD,OAII,OADMK,EAHV,gBAIUkB,YCnBR,CAAExB,KNAgC,uBMAJC,QDmBAK,IAJhC,uDAMIS,QAAQC,IAAR,MANJ,qDAgBe,SAAUK,IAAV,iEACb,OADa,SACPI,YLnCwB,mBKmCIN,GADrB,OAEb,OAFa,SAEPM,YLlC4B,uBKkCIL,GAFzB,uCE5Bf,IAAMM,EAAiBC,cAGRC,EADDC,YAAYC,EAASC,YAAgBL,IAInDA,EAAeM,IAAIX,G,4CCVNY,EAAiB,iBAC5B,CAAEjC,KRH4B,qBSEnBkC,EAAoB,SAAChB,GAAD,MAC/B,CAAElB,KTDgC,uBSCJC,QAASiB,ICG1BiB,G,MAHA,SAACC,GAAD,OACb,0BAAMC,QAASD,EAAME,MAAOC,UAAU,OAAtC,WCgCaC,G,MAAAA,aAJS,SAACzC,GACvB,MAAO,CAACQ,SAAUR,EAAMQ,YAGXiC,EAhCC,SAACJ,GACf,IAAMK,EAAOC,OAAOD,KAAKL,EAAM7B,UACzBoC,EAASD,OAAOC,OAAOP,EAAM7B,UACnC,OACE,yBAAKgC,UAAU,qBACb,wBAAIA,UAAU,iBACXH,EAAM7B,SAASqC,MAElB,wBAAIL,UAAU,WAEVE,EAAKI,KAAI,SAACC,EAASC,GACjB,GAAGA,EAAQ,EACT,OACE,wBAAIC,IAAKD,EACLR,UAAU,gBAEZ,yBAAKA,UAAU,oBAAf,UAAsCO,EAAtC,MACA,yBAAKP,UAAU,oBAAoBI,EAAOI,cCZtDE,G,iNACJlD,MAAQ,CAACmD,WAAW,G,0EAGlBC,KAAKC,SAAS,CAACF,WAAW,IAC1BC,KAAKf,MAAMH,mB,8BAGLf,GACNiC,KAAKf,MAAMF,kBAAkBhB,K,+BAGrB,IAAD,OACDJ,EAAWqC,KAAKf,MAAM9B,KAC5B,OACE,6BACE,yBAAKiC,UAAU,QACb,wBAAIA,UAAU,cAAd,uBACA,wBAAIA,UAAU,oBAAd,qCACA,kBAAC,EAAD,CAAQD,MAAOa,KAAKE,SAASC,KAAKH,QAElC,yBAAKZ,UAAU,gBAEZzB,EAAQyC,OAER,wBAAIhB,UAAU,qBACZzB,EAAQ+B,KAAI,SAACW,EAAMT,GAClB,OAAQ,wBAAIC,IAAKD,EACPR,UAAU,yBACVF,QAAS,kBAAM,EAAKoB,QAAQD,EAAKtC,OAEhCsC,EAAKZ,UAPnB,4BAAKO,KAAKpD,MAAMmD,WAAa,cAY9B,yBAAKX,UAAU,wBACZY,KAAKf,MAAM7B,SAASJ,OACnB,kBAAC,EAAD,MACA,a,GAvCGuD,cAwDJlB,eAPS,SAAAzC,GAAK,MACzB,CAAEO,KAAMP,EAAMO,KAAMC,SAAUR,EAAMQ,aAGb,SAAAoD,GAAQ,OACjCC,YAAmB,CAAE3B,iBAAgBC,qBAAqByB,KAE7CnB,CAA6CS,GCxD7CY,EAJF,kBACX,kBAAC,IAAD,CAAUjC,MAAOA,GACf,kBAAC,EAAD,QCHJkC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.1301b293.chunk.js","sourcesContent":["import { RECEIVE_API_DATA } from \"../actions/action-types\";\r\n\r\n const dataReduser = (state = [], { type, payload }) => {\r\n  switch (type) {\r\n    case RECEIVE_API_DATA:      \r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default dataReduser;","export const REQUEST_API_DATA = \"REQUEST_API_DATA\";\r\nexport const RECEIVE_API_DATA = \"RECEIVE_API_DATA\";\r\nexport const REQUEST_API_DATA_URL = \"REQUEST_API_DATA_URL\";\r\nexport const RECEIVE_API_DATA_URL = \"RECEIVE_API_DATA_URL\";","import { RECEIVE_API_DATA_URL } from \"../actions/action-types\";\r\n\r\n const itemReduser = (state = {}, { type, payload }) => {\r\n  switch (type) {\r\n    case RECEIVE_API_DATA_URL: {\r\n      return {...payload, isOpen: true};\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default itemReduser;","import { combineReducers } from \"redux\";\r\nimport dataReduser from \"./dataReduser\";\r\nimport itemReduser from \"./itemReduser\";\r\n\r\nconst rootReduser = combineReducers({\r\n  data: dataReduser,\r\n  itemInfo: itemReduser\r\n});\r\nexport default rootReduser;","import { RECEIVE_API_DATA } from './action-types';\r\n\r\nexport const receiveApiData = (data) => (\r\n  { type: RECEIVE_API_DATA, payload: data }\r\n);","export const fetchData = async () => {\r\n  try {\r\n    const response = await fetch(\"https://swapi.co/api/planets/\");\r\n    const data = await response.json();\r\n    return data.results;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\nexport const fetchDataUrl = async (url) => {\r\n  try {\r\n    const response = await fetch(url);    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};","import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport { REQUEST_API_DATA } from \"./actions/action-types\";\r\nimport { REQUEST_API_DATA_URL } from \"./actions/action-types\";\r\nimport { receiveApiData } from \"./actions/receiveApiData\";\r\nimport { receiveApiDataUrl } from \"./actions/receiveApiDataUrl\";\r\nimport { fetchData } from \"./api\";\r\nimport { fetchDataUrl } from \"./api\";\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* getApiData(action) {\r\n  try {\r\n    // do api call\r\n    const data = yield call(fetchData);\r\n    yield put(receiveApiData(data));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\nfunction* getApiDataUrl(action) {\r\n  try {\r\n    // do api call\r\n    const data = yield call(fetchDataUrl, action.payload);\r\n    yield put(receiveApiDataUrl(data));\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\n/*\r\n  Alternatively we may use takeLatest.\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\nexport default function* mySaga() {\r\n  yield takeEvery(REQUEST_API_DATA, getApiData);\r\n  yield takeEvery(REQUEST_API_DATA_URL, getApiDataUrl);\r\n}","import { RECEIVE_API_DATA_URL } from './action-types';\r\n\r\nexport const receiveApiDataUrl = (item) => (\r\n  { type: RECEIVE_API_DATA_URL, payload: item }\r\n);","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport reducer from \"./reducers/rootReduser\";\r\nimport mySaga from \"./sagas\";\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n// mount it on the Store\r\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\r\nexport default store;\r\n\r\n// then run the saga\r\nsagaMiddleware.run(mySaga);","import { REQUEST_API_DATA } from \"./action-types\";\r\n\r\nexport const requestApiData = () => (\r\n  { type: REQUEST_API_DATA }\r\n);","import { REQUEST_API_DATA_URL } from \"./action-types\";\r\n\r\nexport const requestApiDataUrl = (url) => (\r\n  { type: REQUEST_API_DATA_URL, payload: url }\r\n)","import React from 'react';\r\nimport './button.scss';\r\n\r\nconst Button = (props) =>   \r\n  <span onClick={props.click} className=\"btn\">Click</span>\r\n\r\nexport default Button;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './details.scss';\r\n\r\nconst Details = (props) => {\r\n  const keys = Object.keys(props.itemInfo);\r\n  const values = Object.values(props.itemInfo);\r\n  return(\r\n    <div className=\"details-container\">\r\n      <h2 className=\"details-title\">\r\n        {props.itemInfo.name}\r\n      </h2>\r\n      <ul className=\"details\">\r\n        {\r\n          keys.map((element, index) => {\r\n            if(index < 7) {\r\n              return(\r\n                <li key={index}\r\n                    className=\"details-list\"\r\n                >\r\n                  <div className=\"detail-list-item\">{`${element}:`}</div> \r\n                  <div className=\"detail-list-item\">{values[index]}</div>\r\n                </li>\r\n              )\r\n            }   \r\n          })\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}  \r\n\r\nconst mapStateToProps = (state) => {\r\n  return {itemInfo: state.itemInfo}\r\n}\r\n\r\nexport default connect(mapStateToProps)(Details);","import React, { Component } from \"react\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { requestApiData } from \"../../actions/requestApiData\";\r\nimport { requestApiDataUrl } from \"../../actions/requestApiDataUrl\";\r\nimport Button from \"../../components/button/Button\";\r\nimport Details from \"../../components/details/Details\";\r\nimport './home.scss';\r\n\r\nclass Home extends Component {\r\n  state = {isClicked: false}\r\n\r\n  clickBtn() {\r\n    this.setState({isClicked: true});\r\n    this.props.requestApiData();    \r\n  }\r\n\r\n  getItem(url) {\r\n    this.props.requestApiDataUrl(url);    \r\n  }\r\n\r\n  render() {\r\n    const results =  this.props.data;\r\n    return(\r\n      <div>\r\n        <div className=\"home\">\r\n          <h1 className=\"home-title\">Planets from SWAPI:</h1>\r\n          <h2 className=\"home-description\">For get planets click the button:</h2>\r\n          <Button click={this.clickBtn.bind(this)}/>\r\n          \r\n          <div className=\"home-content\">\r\n            {\r\n            !results.length \r\n            ?<h2>{this.state.isClicked && 'loading...'}</h2> \r\n            :<ul className=\"home-content-list\">\r\n              {results.map((item, index) => {\r\n                return  <li key={index}\r\n                          className=\"home-content-list-item\"\r\n                          onClick={() => this.getItem(item.url)}\r\n                        >\r\n                          {item.name}                         \r\n                        </li>\r\n              })}\r\n            </ul>\r\n            }\r\n            <div className=\"home-content-details\">\r\n              {this.props.itemInfo.isOpen\r\n              ? <Details />\r\n              : null\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>        \r\n      </div>    \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => (\r\n    { data: state.data, itemInfo: state.itemInfo }\r\n  );\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators({ requestApiData, requestApiDataUrl }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport Home from \"./pages/home/Home\";\r\n\r\nconst App =  () =>\r\n  <Provider store={store}>\r\n    <Home />\r\n  </Provider>;\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}